// <auto-generated />
using Mediporta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mediporta.Data.Migrations
{
    [DbContext(typeof(MediportaDbContext))]
    [Migration("20250929110443_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Mediporta.Data.Entities.Collective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Collectives");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CollectiveId");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSynonyms")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsModeratorOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.TagCollective", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollectiveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "CollectiveId");

                    b.HasIndex("CollectiveId");

                    b.ToTable("TagCollectives");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.ExternalLink", b =>
                {
                    b.HasOne("Mediporta.Data.Entities.Collective", "Collective")
                        .WithMany("ExternalLinks")
                        .HasForeignKey("CollectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collective");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.TagCollective", b =>
                {
                    b.HasOne("Mediporta.Data.Entities.Collective", "Collective")
                        .WithMany("TagCollectives")
                        .HasForeignKey("CollectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mediporta.Data.Entities.Tag", "Tag")
                        .WithMany("TagCollectives")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collective");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.Collective", b =>
                {
                    b.Navigation("ExternalLinks");

                    b.Navigation("TagCollectives");
                });

            modelBuilder.Entity("Mediporta.Data.Entities.Tag", b =>
                {
                    b.Navigation("TagCollectives");
                });
#pragma warning restore 612, 618
        }
    }
}
